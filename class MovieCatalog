import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class MovieCatalog {
    ArrayList<Movie> movies;
    String sortedByAttribute;

    public MovieCatalog(ArrayList<Movie> movies) {
        this.movies = movies;
        this.sortedByAttribute = null;
    }

    public ArrayList<Movie> getMoviesByRating(double rating) {
        ArrayList<Movie> result = new ArrayList<>();
        double tol = 0.1;

        if ("rating".equals(sortedByAttribute)) {
            int left = 0, right = movies.size() - 1;
            int index = -1;

            while (left <= right) {
                int mid = (left + right) / 2;
                double r = movies.get(mid).rating;
                if (Math.abs(r - rating) <= tol) {
                    index = mid;
                    break;
                } else if (r < rating) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }

            if (index != -1) {
                int i = index;
                while (i >= 0 && Math.abs(movies.get(i).rating - rating) <= tol) {
                    result.add(movies.get(i));
                    i--;
                }
                i = index + 1;
                while (i < movies.size() && Math.abs(movies.get(i).rating - rating) <= tol) {
                    result.add(movies.get(i));
                    i++;
                }
            }

        } else {
            for (Movie m : movies) {
                if (Math.abs(m.rating - rating) <= tol) {
                    result.add(m);
                }
            }
        }

        return result;
    }

    public ArrayList<Movie> getMoviesByRatingRange(double lower, double upper) {
        ArrayList<Movie> result = new ArrayList<>();

        if ("rating".equals(sortedByAttribute)) {
            int left = 0, right = movies.size() - 1;
            int startIndex = -1;

            while (left <= right) {
                int mid = (left + right) / 2;
                if (movies.get(mid).rating >= lower) {
                    startIndex = mid;
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }

            if (startIndex != -1) {
                for (int i = startIndex; i < movies.size(); i++) {
                    if (movies.get(i).rating > upper) break;
                    result.add(movies.get(i));
                }
            }

        } else {
            for (Movie m : movies) {
                if (m.rating >= lower && m.rating <= upper) result.add(m);
            }
        }

        return result;
    }

    public ArrayList<Movie> getMoviesByGenre(String genre) {
        ArrayList<Movie> result = new ArrayList<>();

        if ("genre".equals(sortedByAttribute)) {
            int left = 0, right = movies.size() - 1;
            int index = -1;
            while (left <= right) {
                int mid = (left + right) / 2;
                int cmp = movies.get(mid).genre.compareTo(genre);
                if (cmp == 0) {
                    index = mid;
                    break;
                } else if (cmp < 0) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }

            if (index != -1) {
                int i = index;
                while (i >= 0 && movies.get(i).genre.equals(genre)) {
                    result.add(movies.get(i));
                    i--;
                }
                i = index + 1;
                while (i < movies.size() && movies.get(i).genre.equals(genre)) {
                    result.add(movies.get(i));
                    i++;
                }
            }

        } else {
            for (Movie m : movies) {
                if (m.genre.equals(genre)) result.add(m);
            }
        }
        return result;
    }

    public ArrayList<Movie> getMoviesByDirector(String director) {
        ArrayList<Movie> result = new ArrayList<>();

        if ("director".equals(sortedByAttribute)) {
            int left = 0, right = movies.size() - 1;
            int index = -1;
            while (left <= right) {
                int mid = (left + right) / 2;
                int cmp = movies.get(mid).director.compareTo(director);
                if (cmp == 0) {
                    index = mid;
                    break;
                } else if (cmp < 0) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }

            if (index != -1) {
                int i = index;
                while (i >= 0 && movies.get(i).director.equals(director)) {
                    result.add(movies.get(i));
                    i--;
                }
                i = index + 1;
                while (i < movies.size() && movies.get(i).director.equals(director)) {
                    result.add(movies.get(i));
                    i++;
                }
            }

        } else {
            for (Movie m : movies) {
                if (m.director.equals(director)) result.add(m);
            }
        }

        return result;
    }

    public ArrayList<Movie> getMoviesByYear(int year) {
        ArrayList<Movie> result = new ArrayList<>();

        if ("year".equals(sortedByAttribute)) {
            int left = 0, right = movies.size() - 1;
            int index = -1;
            while (left <= right) {
                int mid = (left + right) / 2;
                if (movies.get(mid).releaseYear == year) {
                    index = mid;
                    break;
                } else if (movies.get(mid).releaseYear < year) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }

            if (index != -1) {
                int i = index;
                while (i >= 0 && movies.get(i).releaseYear == year) {
                    result.add(movies.get(i));
                    i--;
                }
                i = index + 1;
                while (i < movies.size() && movies.get(i).releaseYear == year) {
                    result.add(movies.get(i));
                    i++;
                }
            }

        } else {
            for (Movie m : movies) {
                if (m.releaseYear == year) result.add(m);
            }
        }

        return result;
    }

    public void sortByAlgorithm(String algorithm, String attribute) {
        Comparator<Movie> comp;

        switch (attribute) {
            case "rating": comp = (a,b) -> Double.compare(a.rating, b.rating); break;
            case "genre": comp = (a,b) -> a.genre.compareTo(b.genre); break;
            case "director": comp = (a,b) -> a.director.compareTo(b.director); break;
            case "year": comp = (a,b) -> Integer.compare(a.releaseYear, b.releaseYear); break;
            default:
                comp = (a,b) -> Double.compare(a.rating, b.rating);
                attribute = "rating";
        }

        switch (algorithm) {
            case "insertionSort": insertionSort(movies, comp); break;
            case "selectionSort": selectionSort(movies, comp); break;
            case "mergeSort": movies = mergeSort(movies, comp); break;
            case "quickSort": quickSort(movies, 0, movies.size()-1, comp); break;
            case "radixSort":
                if ("year".equals(attribute)) {
                    radixSort(movies);
                } else {
                    Collections.sort(movies, comp);
                }
                break;
            default: Collections.sort(movies, comp); break;
        }

        sortedByAttribute = attribute;
    }

    private void insertionSort(ArrayList<Movie> list, Comparator<Movie> c) {
        for (int i = 1; i < list.size(); i++) {
            Movie key = list.get(i);
            int j = i - 1;
            while (j >= 0 && c.compare(list.get(j), key) > 0) {
                list.set(j+1, list.get(j));
                j--;
            }
            list.set(j+1, key);
        }
    }

    private void selectionSort(ArrayList<Movie> list, Comparator<Movie> c) {
        for (int i = 0; i < list.size()-1; i++) {
            int min = i;
            for (int j = i+1; j < list.size(); j++) {
                if (c.compare(list.get(j), list.get(min)) < 0) min = j;
            }
            Collections.swap(list, i, min);
        }
    }

    private ArrayList<Movie> mergeSort(ArrayList<Movie> list, Comparator<Movie> c) {
        if (list.size() <= 1) return list;
        int mid = list.size()/2;
        ArrayList<Movie> left = mergeSort(new ArrayList<>(list.subList(0, mid)), c);
        ArrayList<Movie> right = mergeSort(new ArrayList<>(list.subList(mid, list.size())), c);
        return merge(left, right, c);
    }

    private ArrayList<Movie> merge(ArrayList<Movie> left, ArrayList<Movie> right, Comparator<Movie> c) {
        ArrayList<Movie> res = new ArrayList<>();
        int i=0, j=0;
        while (i<left.size() && j<right.size()) {
            if (c.compare(left.get(i), right.get(j)) <= 0) res.add(left.get(i++));
            else res.add(right.get(j++));
        }
        while (i<left.size()) res.add(left.get(i++));
        while (j<right.size()) res.add(right.get(j++));
        return res;
    }

    private void quickSort(ArrayList<Movie> list, int low, int high, Comparator<Movie> c) {
        if (low<high) {
            int p = partition(list, low, high, c);
            quickSort(list, low, p-1, c);
            quickSort(list, p+1, high, c);
        }
    }

    private int partition(ArrayList<Movie> list, int low, int high, Comparator<Movie> c) {
        Movie pivot = list.get(high);
        int i = low-1;
        for (int j=low; j<high; j++) {
            if (c.compare(list.get(j), pivot) <= 0) {
                i++;
                Collections.swap(list, i, j);
            }
        }
        Collections.swap(list, i+1, high);
        return i+1;
    }

    private void radixSort(ArrayList<Movie> list) {
        if (list.isEmpty()) return;
        int maxYear = 0;
        for (Movie m : list) {
            if (m.releaseYear > maxYear) maxYear = m.releaseYear;
        }
        for (int exp = 1; maxYear / exp > 0; exp *= 10) {
            countSortYear(list, exp);
        }
    }

    private void countSortYear(ArrayList<Movie> list, int exp) {
        int n = list.size();
        List<Movie> output = new ArrayList<>(Collections.nCopies(n, null));
        int[] count = new int[10];

        for (int i = 0; i < n; i++) {
            count[(list.get(i).releaseYear / exp) % 10]++;
        }

        for (int i = 1; i < 10; i++) {
            count[i] += count[i - 1];
        }

        for (int i = n - 1; i >= 0; i--) {
            int digit = (list.get(i).releaseYear / exp) % 10;
            output.set(count[digit] - 1, list.get(i));
            count[digit]--;
        }

        for (int i = 0; i < n; i++) {
            list.set(i, output.get(i));
        }
    }
}
